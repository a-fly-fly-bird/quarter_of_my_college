FROM ubuntu:16.04
# FROM arm64v8/ubuntu:xenial
LABEL image.authors="lucas tan"
LABEL image.email="lucas.y.tan@outlook.com"

# To build ORB_SLAM2 using this Docker image:
# docker run -v ~/docker/ORB_SLAM2/:/ORB_SLAM2/ -w=/ORB_SLAM2/ slam-test /bin/bash -c ./build.sh

ENV OPENCV_VERSION 3.4.5
ENV OPENCV_DOWNLOAD_URL https://github.com/opencv/opencv/archive/$OPENCV_VERSION.zip
ENV OpenCV_DIR opencv-$OPENCV_VERSION
ENV EIGEN_VERSION 3.3.7
ENV EIGEN_DOWNLOAD_URL https://github.com/eigenteam/eigen-git-mirror/archive/refs/tags/$EIGEN_VERSION.tar.gz
ENV PANGOLIN 0.5
#                         https://github.com/stevenlovegrove/Pangolin/archive/refs/tags/v0.5.zip
ENV PANGOLIN_DOWNLOAD_URL https://github.com/stevenlovegrove/Pangolin/archive/refs/tags/v$PANGOLIN.zip

# i 直接修改源文件, 如果不加sed并没有对文件的内容改变，只是把处理过后的内容输出
# s （substitute），表示替换命令，The syntax of the s (as in substitute) command is ‘s/regexp/replacement/flags’. 
# g 对数据中所有匹配到的内容进行替换，如果没有 g，则只会在第一次匹配成功时做替换操作
# 点进去容器看才发现全是ports.ubuntu.com，教程害人不浅
RUN sed -i s/archive.ubuntu.com/mirrors.aliyun.com/g /etc/apt/sources.list \
  && sed -i s/security.ubuntu.com/mirrors.aliyun.com/g /etc/apt/sources.list \
  && apt-get update && apt-get upgrade

RUN  apt-get clean

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
  vim \
  build-essential \
  cmake \
  curl \ 
  gcc \
  g++ \
  git \
  libglew-dev \
  libgtk2.0-dev \
  pkg-config \
  libavcodec-dev \
  libavformat-dev \
  libswscale-dev \
  python-dev \
  python-numpy \
  unzip 

# 如果出现 gnutls_handshake() failed: The TLS connection was non-properly terminated. 重置代理: https://blog.csdn.net/shaopeng568/article/details/114919318. 
# git config --global  --unset https.https://github.com.proxy  
# git config --global  --unset http.https://github.com.proxy 
# install OpenCV
RUN curl -fsSL "$OPENCV_DOWNLOAD_URL" -o opencv.zip \
  && unzip opencv.zip \
  && rm opencv.zip \
  && cd $OpenCV_DIR \
  && mkdir release \
  && cd release \
  && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. \
  && make \
  && make install

# install Eigen
RUN curl -fsSL "$EIGEN_DOWNLOAD_URL" -o eigen.tar.gz \
  && mkdir /usr/include/eigen \
  # rename first directory to be eigen instead of eigen-eigen-*
  && tar -xf eigen.tar.gz --strip-components=1 -C /usr/include/eigen \
  && rm eigen.tar.gz

# install Pangolin
RUN curl -fsSL "$PANGOLIN_DOWNLOAD_URL" -o pangolin.zip \
  && unzip pangolin.zip\
  && rm pangolin.zip \
  && cd Pangolin-$PANGOLIN \
  && mkdir build \
  && cd build \
  && cmake .. \
  && make

# build ORB-SLAM2
RUN apt-get install -y sudo \
  && git clone https://github.com/raulmur/ORB_SLAM2.git ORB_SLAM2 \
  && cd ORB_SLAM2 \
  && chmod +x build.sh

COPY usleep_process.sh ./ORB_SLAM2

RUN cd ORB_SLAM2 \
  && chmod u+x usleep_process.sh \
  && bash ./usleep_process.sh \
  && ./build.sh

# ===== ROS ENV INSTALLATION(not necessary) =====

RUN git clone https://github.com/RocShi/rostaller.git \
  && cd rostaller \
  && chmod +x ./run.sh \
  && ./run.sh

# COPY nodesource.gpg.key .

# RUN apt-get install -y lsb-release \
#   && apt-get clean all \
#   && sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list' \
#   # && sed -e '1inameserver 114.114.114.114' /etc/resolv.conf\
#   # && /etc/init.d/networking restart \
#   # && /etc/init.d/resolvconf restart \
#   && sed -e '1i 199.232.68.133 raw.githubusercontent.com' /etc/hosts \
#   && sed -e '1i 199.232.68.133 user-images.githubusercontent.com' /etc/hosts \
#   && sed -e '1i 199.232.68.133 avatars2.githubusercontent.com' /etc/hosts \
#   && sed -e '1i 199.232.68.133 avatars1.githubusercontent.com' /etc/hosts \
#   # && /etc/init.d/network restart \
#   # && curl -O https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc \
#   && apt-key add nodesource.gpg.key \
#   && sh -c '. /etc/lsb-release && echo "deb http://mirrors.ustc.edu.cn/ros/ubuntu/ `lsb_release -cs` main" > /etc/apt/sources.list.d/ros-latest.list' \
#   && apt-get update \
#   && DEBIAN_FRONTEND=noninteractive apt-get install -y ros-kinetic-ros-base

# RUN echo ". /opt/ros/kinetic/setup.sh" >> ~/.bashrc \
#   && . ~/.bashrc \
#   && DEBIAN_FRONTEND=noninteractive apt install -y python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential \
#   && DEBIAN_FRONTEND=noninteractive apt install -y python-rosdep

# COPY resolv.conf /etc/resolv.conf

# COPY rosdistro/ /etc/ros/rosdistro

# COPY 20-default.list /etc/ros/rosdep/sources.list.d/

# RUN sed -i "s#DEFAULT_INDEX_URL = 'https://raw.githubusercontent.com/ros/rosdistro/master/index-v4.yaml'#DEFAULT_INDEX_URL = 'file:///etc/ros/rosdistro/master/index-v4.yaml'#g" /usr/lib/python2.7/dist-packages/rosdistro/__init__.py \
#   && sed -i "#^FUERTE_GBPDISTRO_URL#cFUERTE_GBPDISTRO_URL = 'file:///etc/ros/rosdistro/releases/fuerte.yaml'#" /usr/lib/python2.7/dist-packages/rosdep2/gbpdistro_support.py \
#   && sed -i "#^REP3_TARGETS_URL#cREP3_TARGETS_URL = 'file:///etc/ros/rosdistro/releases/targets.yaml'#" /usr/lib/python2.7/dist-packages/rosdep2/rep3.py \
#   && apt-get update \
#   && rosdep update

RUN cd ORB_SLAM2 \
  && chmod +x build_ros.sh
